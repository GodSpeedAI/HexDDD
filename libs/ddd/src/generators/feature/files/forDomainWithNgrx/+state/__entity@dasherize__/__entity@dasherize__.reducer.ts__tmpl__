import { createReducer, on, createFeature, createSelector } from '@ngrx/store';
import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';

import { <%= camelize(entity) %>Actions } from './<%= dasherize(entity) %>.actions';
import { <%= classify(entity) %> } from '../../entities/<%= dasherize(entity) %>';

export interface TransientState {
  selectedId: string | number | undefined;
  loaded: boolean; 
  error: unknown | undefined; 
}

const adapter: EntityAdapter<<%= classify(entity) %>> =
  createEntityAdapter<<%= classify(entity) %>>();

export const initialState = adapter.getInitialState<TransientState>({
  loaded: false,
  selectedId: undefined,
  error: undefined
});

export const <%= camelize(entity) %>Feature = createFeature({
  name: '<%=camelize(domain)%><%= classify(entity) %>',
  reducer: createReducer(
    initialState,
    on(<%= camelize(entity) %>Actions.load<%= classify(entity) %>, (state) => ({
      ...state,
      loaded: false,
      error: null,
    })),
    on(<%= camelize(entity) %>Actions.load<%= classify(entity) %>Success, (state, action) =>
      adapter.upsertMany(action.<%= camelize(entity) %>List, { ...state, loaded: true })
    ),
    on(<%= camelize(entity) %>Actions.load<%= classify(entity) %>Failure, (state, action) => ({
      ...state,
      error: action.error
    }))
  ),
  extraSelectors: (
    { select<%=classify(domain)%><%= classify(entity) %>State, selectSelectedId },
    selectors = adapter.getSelectors(select<%=classify(domain)%><%= classify(entity) %>State)
  ) => ({
    selectAll: selectors.selectAll,
    selectSelected: createSelector(
      selectors.selectAll,
      selectSelectedId,
      (all, id) => all.find(e => e.id === id)
    )
  })
});
